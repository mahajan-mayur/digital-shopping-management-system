/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.dsms.ui;

import java.util.List;
import java.util.stream.Collectors;

import com.dsms.beans.ContextProvider;
import com.dsms.beans.EventPublisherService;
import com.dsms.controller.CartController;
import com.dsms.controller.UserController;
import com.dsms.db.entity.CartItem;
import com.dsms.db.entity.ItemEntity;
import com.dsms.db.entity.UserEntity;
import com.dsms.ui.components.CartDetails;
import com.dsms.ui.components.ItemPane;
import com.dsms.ui.event.ItemListPageRefreshEventListner;
import com.dsms.ui.event.model.NavigateEvent;
import static java.awt.Component.CENTER_ALIGNMENT;
import java.awt.Dimension;
import java.util.EventObject;
import java.util.Iterator;
import javax.swing.Box;
import javax.swing.BoxLayout;
import javax.swing.JPanel;
import javax.swing.JScrollPane;

import lombok.extern.slf4j.Slf4j;

/**
 *
 * @author Mahaj
 */
@Slf4j
public class CartPage extends JPanel {

    private final AbstractPaginatedItemListPage.ItemListPageType itemListPageType;
    private JPanel content;
    private JScrollPane scrollPanel;
    private List<CartItem> cartItemList;
    private List<ItemEntity> itemList;

    /**
     * Creates new form HomePage
     */
    public CartPage() {
        initComponents();
        itemListPageType = AbstractPaginatedItemListPage.ItemListPageType.CART_PAGE;
        EventPublisherService.addEventListner(new ItemListPageRefreshEventListnerImpl());
        showContent();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 0));
        jLabel13 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        contentPanel = new javax.swing.JPanel();

        setBackground(new java.awt.Color(255, 255, 255));
        setMinimumSize(new java.awt.Dimension(420, 322));
        setPreferredSize(new java.awt.Dimension(420, 322));
        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.PAGE_AXIS));

        jPanel2.setMaximumSize(new java.awt.Dimension(32767, 83));
        jPanel2.setMinimumSize(new java.awt.Dimension(287, 83));
        jPanel2.setPreferredSize(new java.awt.Dimension(287, 83));
        jPanel2.setVerifyInputWhenFocusTarget(false);
        jPanel2.setLayout(new javax.swing.BoxLayout(jPanel2, javax.swing.BoxLayout.LINE_AXIS));
        jPanel2.add(filler1);

        jLabel13.setBackground(new java.awt.Color(255, 255, 255));
        jLabel13.setFont(new java.awt.Font("SansSerif", 1, 36)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(64, 43, 100));
        jLabel13.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/carts.png"))); // NOI18N
        jLabel13.setText("C A R T");
        jPanel2.add(jLabel13);

        add(jPanel2);

        jPanel1.setLayout(new javax.swing.BoxLayout(jPanel1, javax.swing.BoxLayout.PAGE_AXIS));

        contentPanel.setLayout(new javax.swing.BoxLayout(contentPanel, javax.swing.BoxLayout.LINE_AXIS));
        jPanel1.add(contentPanel);

        add(jPanel1);
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel contentPanel;
    private javax.swing.Box.Filler filler1;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    // End of variables declaration//GEN-END:variables

    private final void initPageContent() {
        CartController cartController = ContextProvider.getBean(CartController.class);
        UserController userController = ContextProvider.getBean(UserController.class);
        UserEntity userEntity = userController.getLoggedInUser();
        cartItemList = cartController.getCartItems(userEntity);
        itemList = cartItemList.stream().map(wishlistItem -> wishlistItem.getItemEntity()).collect(Collectors.toList());
    }

    private void showContent() {
        initPageContent();
        contentPanel.removeAll();
        content = new JPanel();
        content.setLayout(new BoxLayout(content, BoxLayout.PAGE_AXIS));
        content.setMaximumSize(contentPanel.getSize());
        content.setSize(contentPanel.getSize());
        List<ItemPane> itemPaneList = itemList.stream().map(item -> new ItemPane(item, itemListPageType)).collect(Collectors.toList());
        // itemList.stream().forEach(i -> content.add(i));
        Iterator<ItemPane> itr = itemPaneList.iterator();
        while (itr.hasNext()) {
            ItemPane itemPane = itr.next();
            itemPane.setSize(2048, 350);
            itemPane.setMaximumSize(new Dimension(4058, 450));
            Box box = new Box(BoxLayout.LINE_AXIS);
            box.setAlignmentX(CENTER_ALIGNMENT);
            box.add(Box.createHorizontalGlue());
            box.add(itemPane);
            box.add(Box.createHorizontalGlue());
            content.add(box);
        }

        CartDetails cartDetails = new CartDetails(cartItemList);
        //cartDetails.setSize(2048, 350);
        //cartDetails.setMaximumSize(new Dimension(4058, 450));
        Box box = new Box(BoxLayout.LINE_AXIS);
        box.setAlignmentX(CENTER_ALIGNMENT);
        box.add(Box.createHorizontalGlue());
        box.add(cartDetails);
        box.add(Box.createHorizontalGlue());
        content.add(box);

        scrollPanel = new JScrollPane(content, JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED, JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        scrollPanel.getViewport().setSize(contentPanel.getSize());
        contentPanel.add(scrollPanel);
        revalidate();
        repaint();
    }

    protected final class ItemListPageRefreshEventListnerImpl implements ItemListPageRefreshEventListner {

        @Override
        public void onEvent(EventObject eventObject) {
            //EventPublisherService.publishEvent(new NavigateEvent(eventObject, NavigateEvent.NavigateTo.CART_PAGE));
            showContent();
        }
    }
    
    
}
